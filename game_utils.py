# Aaron Matayka
# Andrew Matayka
# 03/13/25
# Main Utility File for holding shared functions such as
# generating the grid, moving players, checking meet conditions, displaying statistics, etc
#
from player import Player
import time

# Simple function to make a grid based on the x_size and y_size,
# and if not declared makes a 2x2 grid
def make_grid(x_size = 2, y_size = 2):
    grid = []

    for _ in range(y_size):
        grid.append([0 for _ in range(x_size)])

    return grid

# Simple function used for printing any grid generated by make_grid.
# Uses *row to print without brackets for cleaner visualization
def print_grid(grid):
    for row in grid:
        print(*row)
    print()

# Function used to place players on the grid, defaulting to 2 players and the
# top left and bottom right corner of the grid. Can also input direct positions
# on the grid instead to position each character
def place_players(grid, players=2, positions=None):
    x_size = len(grid[0])
    y_size = len(grid)
    player_objects = []

    if positions is None:
        positions = [(0, 0), (y_size - 1, x_size - 1)] if players == 2 else []

    for i in range(players):
        if i < len(positions):
            y, x = positions[i]
            if 0 <= y < y_size and 0 <= x < x_size:
                player = Player(i + 1, (y, x))
                grid[y][x] = player.number
                player_objects.append(player)
            else:
                print(f"Invalid position for player {i + 1}: {(y, x)}")
        else:
            print(f"Warning: Not enough positions for {players} players.")

    return player_objects

# Testing code
# TODO: move to main
test_grid = make_grid(5, 3)
print_grid(test_grid)

players = place_players(test_grid)
print_grid(test_grid)

# Run a loop to move the player randomly multiple times
for _ in range(25):  # Move 10 times
    if players:
        players[0].move("random", test_grid)
    print_grid(test_grid)
    time.sleep(0.5)  # Pause for half a second to visualize changes